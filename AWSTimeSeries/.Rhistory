WHERE source ILIKE ANY(ARRAY['%for Blackberry%', '%for Android%', '%tron%',
'%Foursquare%','%Instagram%','%for iOS%',
'%for iPhone%','%for Windows Phone%',
'%for iPad%','Twitter Web Client','%for Mac%'])
)
SELECT timezone('",tz,"',created_at) as tzone,
text_lang, user_lang, user_id, source
FROM casted
WHERE timezone('",tz,"',created_at) >= '2016-10-28' ;"))
# Disconnect
disconnectDB(con)
coefs <- read.csv(paste0("Outputs/",db,"_model_coefficients.csv"))
coefs
topic.i = "Arabic"
library(dplyr)
library(lubridate)
library(tidyr)
registry <- load_langs()
# Merge the language by the users' selected language!
data_merge <- left_join(loc.data, registry)
data_merge$language <- as.factor(data_merge$language)
# Clean up the source, Extract the Date
data_merge <- data_merge %>%
mutate(source = gsub(pattern = "<.+\">|</a>", "",source),
date = format(tzone, "%d %b %Y"))
# Merge Topics
clean.topics <- merge_topics(data_merge, "Topic_Data/")
counts <- clean.topics %>%
# Extract Date
mutate(date = as.Date(date,"%d %b %Y")) %>%
# Filter out languages in the registry, so it's only the topics
# filter(!(lang.topic %in% registry$language)) %>%
# Filter out NA values
filter(!is.na(lang.topic)) %>%
# Provide the count by day for each topic group.
group_by(date, lang.topic) %>% count
# Spread the data from long to wide format and sort by date
counts <- counts %>%
spread(lang.topic,n) %>%
arrange(date)
counts[is.na(counts)] <- 0
train <- counts %>% filter(date < "2017-01-28" &
lang.topic = topic.i)
train <- counts %>% filter(date < "2017-01-28" &
lang.topic == topic.i)
head(counts)
train <- counts %>%
filter(date < "2017-01-28") %>%
select_(topic.i)
train <- counts %>%
filter(date < "2017-01-28") %>%
select_(topic.i, "date")
head(train)
test <- counts %>%
filter(date >= "2017-01-28") %>%
select_("date", topic.i)
params <- coefs %>%
select(lang.topic, p,d,q) %>%
filter (lang.topic == topic.i)
fit = forecast.Arima(Arima(train, order = c(params$p,params$d,params$q)),
h = 7,
fit = forecast.Arima(Arima(train,
order = c(params$p,params$d,params$q)),
xreg = test)
train[,2]
train <- counts %>%
filter(date < "2017-01-28") %>%
select_("date", topic.i)
head(train)
train[,2]
fit = forecast.Arima(Arima(train %>% select_(topic.i),
order = c(params$p,params$d,params$q)),
xreg = test)
train[,topic.i]
fit = forecast.Arima(Arima(train[,topic.i],
order = c(params$p,params$d,params$q)),
xreg = test)
fit = forecast.Arima(Arima(train[,topic.i],
order = c(params$p,params$d,params$q)),
xreg = test[,topic.i])
test <- counts %>%
filter(date >= "2017-01-28") %>%
select_("date", topic.i)
head(test)
test[,topic.i]
fit = forecast.Arima(Arima(train[,topic.i],
order = c(params$p,params$d,params$q)),
xreg = test[,topic.i])
c(params$p,params$d,params$q)
Arima(train[,topic.i],
order = c(params$p,params$d,params$q))
fit = forecast.Arima(Arima(train[,topic.i],
order = c(params$p,params$d,params$q)), h = 7)
fit = forecast.Arima(Arima(train[,topic.i],
order = c(params$p,params$d,params$q)),
xreg = test[1:7,topic.i])
plot(forecast(fit))
plot(forecast(fit, xreg = test[1:7,topic.i]))
forecast(fit, xreg = test[1:7,topic.i])
XXXXX <- forecast(fit, xreg = test[1:7,topic.i])
XXXXX
XXXXX$residuals
max(clean.topics$date)
min(clean.topics$date)
counts$date %>% min
counts$date %>% max
XXXXX <- predict(fit, xreg = test[1:7,topic.i])
XXXXX$mean
XXXXX$mean - test[1:7,topic.i]
str(XXXXX$mean)
XXXXX$mean - 3
as.vector(XXXXX$mean) - test[1:7,topic.i]
((as.vector(XXXXX$mean) - test[1:7,topic.i])^2)/7
sum((as.vector(XXXXX$mean) - test[1:7,topic.i])^2)/7
for (i in 1:7){
sum((as.vector(out$mean) - test[1:i,topic.i])^2)/i
}
out <- predict(fit, xreg = test[1:7,topic.i])
# 7-day Predict MSE
for (i in 1:7){
sum((as.vector(out$mean) - test[1:i,topic.i])^2)/i
}
for (i in 1:7){
print(sum((as.vector(out$mean) - test[1:i,topic.i])^2)/i)
}
fit2 <- function(x, h, p,d,q){
forecast(Arima(x, order = c(p,d,q)), h=h)
}
CVresults <- tsCV(test, fit2, h=1, p = params$p, d = params$d, q= params$q)
CVresults
CVresults <- tsCV(test[,i.topic], fit2, h=1, p = params$p, d = params$d, q= params$q)
test
i.topci
i.topic
CVresults <- tsCV(test[,topic.i], fit2, h=1, p = params$p, d = params$d, q= params$q)
CVresults <- tsCV(test[,i.topic], fit2, h=1, p = params$p, d = params$d, q= params$q)
CVresults
sum(CVresults^2)
sum(is.na(CVresults^2))
sum(CVresults[!is.na(CVresults)])
sum(CVresults[!is.na(CVresults)]^2)
sum(CVresults[!is.na(CVresults)]^2)/!is.na(CVresults)
sum(CVresults[!is.na(CVresults)]^2)/sum(!is.na(CVresults))
for (i in 1:7){
CVresults <- tsCV(train[,topic.i], fit2, h=i, p = params$p, d = params$d, q= params$q)
print(sum(CVresults[!is.na(CVresults)]^2)/sum(!is.na(CVresults)))
}
counts
counts <- clean.topics %>%
# Extract Date
mutate(date = as.Date(date,"%d %b %Y")) %>%
# Filter out languages in the registry, so it's only the topics
# filter(!(lang.topic %in% registry$language)) %>%
# Filter out NA values
filter(!is.na(lang.topic)) %>%
# Provide the count by day for each topic group.
group_by(date, lang.topic) %>% count
head(counts)
counts %>% select(lang.topic %in% coefs$lang.topic)
counts <- counts %>%
spread(lang.topic,n) %>%
arrange(date)
counts %>% select(lang.topic %in% coefs$lang.topic)
names(counts)
counts %>% select(date, names(counts) %in% coefs$lang.topic)
coefs$lang.topic
counts %>% select(one_of(coefs$lang.topic))
!is.na(coefs$lang.topic)
counts %>% select(one_of(coefs$lang.topic[1:5]))
coefs$lang.topic[1:5]
counts %>% select(one_of(
as.vector(coefs$lang.topic[1:5])))
counts %>% select(one_of(
as.vector(coefs$lang.topic)))
names(counts)
names(counts[1:51])
names(counts)[1:51]
names(counts)
names(counts[2:51])
names(counts[-date])
names(counts[-"date"])
2:51
names(counts[2:51])
for (i in names(counts[2:51])){print i}
for (i in names(counts[2:51])){print(i)}
train <- counts %>%
filter(date < "2017-01-28") %>%
select_("date", date, one_of(
as.vector(coefs$lang.topic)))
counts
counts$`Topic 0 - English`
train <- counts %>%
filter(date < "2017-01-28") %>%
select(date, one_of(
as.vector(coefs$lang.topic)))
test <- counts %>%
filter(date >= "2017-01-28") %>%
select(date, one_of(
as.vector(coefs$lang.topic)))
names(test)
for(i in names(train)[2:20]){
print(i)
}
#Fit a model to each subset
fit <- function(x, h, p,d,q){
forecast(Arima(x, order = c(p,d,q)), h=h)
}
?Arima
?accuracy
fitted = Arima(train[,topic.i], order = c(params$p,params$d,params$q))
accuracy(fitted)
out <- predict(fitted, xreg = test[1:7,topic.i])
accuracy(out)
accuracy(out, text[1:7, topic.i])
out <- forecast(fitted, xreg = test[1:7,topic.i])
test[1:7,topic.i]
out <- forecast(fitted, xreg = test[1:7,])
out <- forecast(fitted, xreg = test[1:7,topic.i])
out <- predit(fitted, xreg = test[1:7,topic.i])
out <- predict(fitted, xreg = test[1:7,topic.i])
out$pred
out <- forecast(fitted, h =7)
accuracy(out, test[1:7,topic.i])
accuracy(out, x=test[1:7,topic.i])
out$model
accuracy(out, x=train[-7:-1,topic.i])
accuracy(out, x=tail(train[,topic.i]))
fitted = Arima(train[,topic.i], order = c(params$p,params$d,params$q))
out <- forecast(fitted, h =7)
accuracy(out, x=tail(train[,topic.i]))
out <- forecast.Arima(fitted, h =7)
accuracy(out, x=tail(train[,topic.i]))
for(topic.i in names(train)[2:21]){
params <- coefs %>%
select(lang.topic, p,d,q) %>%
filter (lang.topic == topic.i)
}
?apply
lapply(1:7, mean)
apply(1:7, mean)
apply(1:7, 1)
apply(1:7, 1,mean)
apply(1:7, 2,mean)
apply(1:7, 0,mean)
sapply(1:7,mean)
head(train)
?sapply
apply(train[,2:21], 2, tsCV(train[,topic.i], fit2, h=i, p = params$p, d = params$d, q= params$q))
apply(train[,2:20], 2, tsCV(train[,topic.i], fit2, h=i, p = params$p, d = params$d, q= params$q))
train
apply(train[,2:5], 2, tsCV, fit2, h=i, p = params$p, d = params$d, q= params$q)
apply(train[,2:5], 2, tsCV, fit2, h=1, p = params$p, d = params$d, q= params$q)
apply(train[,2:5], 1, tsCV, fit2, h=1, p = params$p, d = params$d, q= params$q)
CVmodels <- as.data.frame(matrix(names(train[2:21]), nrow = 20, ncol=7))
names(train[2:21]
)
CVmodels <- as.data.frame(matrix(names(train[2:20]), nrow = 19, ncol=7))
CVmodels
names(CVmodels) <- c("lang.topic","1day", "2day","3day","4day","5day","6day","7day")
CVmodels <- as.data.frame(matrix(names(train[2:20]), nrow = 19, ncol=8))
names(CVmodels) <- c("lang.topic","1day", "2day","3day","4day","5day","6day","7day")
sum(CVresults[!is.na(CVresults)]^2)/sum(!is.na(CVresults))
accuracy(CVresults)
CVresults
?tsCV
for(topic.i in names(train)[2:21]){
params <- coefs %>%
select(lang.topic, p,d,q) %>%
filter (lang.topic == topic.i)
for (i in 1:7){
CVresults <- tsCV(train[,topic.i], fit2, h=i, p = params$p, d = params$d, q= params$q)
CVmodels[topic.i,i] <- sum(CVresults[!is.na(CVresults)]^2)/sum(!is.na(CVresults))
}
}
warnings()
CVmodels
params <- coefs %>%
select(lang.topic, p,d,q) %>%
filter (lang.topic == topic.i)
params
topic.i
names(train)
topic.i in names(train)[2:ncol(train)]
topic.i = arabic
topic.i = "Arabic"
params <- coefs %>%
select(lang.topic, p,d,q) %>%
filter (lang.topic == topic.i)
params
for (i in 1:7){
CVresults <- tsCV(train[,topic.i], fit2, h=i, p = params$p, d = params$d, q= params$q)
CVmodels[topic.i,i] <- sum(CVresults[!is.na(CVresults)]^2)/sum(!is.na(CVresults))
}
CVmodels
CVmodels <- as.data.frame(matrix(names(train[2:ncol(train)]), nrow = ncol(train)-1, ncol=8))
CVmodels
CVmodels[topic.i,i]
topic.i
CVmodels[lang.topic == topic.i,i]
names(CVmodels) <- c("lang.topic","1day", "2day","3day","4day","5day","6day","7day")
CVmodels[lang.topic == topic.i,i]
CVmodels
CVmodels[lang.topic == topic.i,] <- sum(CVresults[!is.na(CVresults)]^2)/sum(!is.na(CVresults))
CVmodels[topic.i,]
topic.i
CVmodels[]
CVmodels["Arabic",]
CVmodels$lang.topic
CVmodels[CVmodels$lang.topic == topic.i,]
CVmodels[CVmodels$lang.topic == topic.i,i] <- sum(CVresults[!is.na(CVresults)]^2)/sum(!is.na(CVresults))
CVresults <- tsCV(train[,topic.i], fit2, h=i, p = params$p, d = params$d, q= params$q)
i
CVmodels[CVmodels$lang.topic == topic.i,i] <- sum(CVresults[!is.na(CVresults)]^2)/sum(!is.na(CVresults))
sum(CVresults[!is.na(CVresults)]^2)/sum(!is.na(CVresults))
CVmodels <- as.data.frame(matrix(nrow = ncol(train)-1, ncol=8))
names(CVmodels) <- c("lang.topic","1day", "2day","3day","4day","5day","6day","7day")
CVmodels$lang.topic <- names(train[2:ncol(train)]),
CVmodels$lang.topic <- names(train[2:ncol(train)])
CVmodels[CVmodels$lang.topic == topic.i,i] <- sum(CVresults[!is.na(CVresults)]^2)/sum(!is.na(CVresults))
CVmodels <- as.data.frame(matrix(nrow = ncol(train)-1, ncol=8))
names(CVmodels) <- c("lang.topic","1day", "2day","3day","4day","5day","6day","7day")
CVmodels$lang.topic <- names(train[2:ncol(train)])
for(topic.i in names(train)[2:ncol(train)]){
params <- coefs %>%
select(lang.topic, p,d,q) %>%
filter (lang.topic == topic.i)
for (i in 1:7){
CVresults <- tsCV(train[,topic.i], fit2, h=i, p = params$p, d = params$d, q= params$q)
CVmodels[CVmodels$lang.topic == topic.i,i] <- sum(CVresults[!is.na(CVresults)]^2)/sum(!is.na(CVresults))
}
}
auto.arima(train[,topic.i],ic="aicc",trace=T,stepwise = F, parallel = T)
auto.arima(train[,topic.i],ic="aicc",trace=T,stepwise = F, parallel = T, seasonal = T)
?ts
auto.arima(ts(train[,topic.i],deltat = 7),ic="aicc",trace=T,stepwise = F, parallel = T, seasonal = T)
auto.arima(ts(train[,"French"],deltat = 7),ic="aicc",trace=T,stepwise = F, parallel = T, seasonal = T)
auto.arima(ts(train[,"French"],deltat = 1/7),ic="aicc",trace=T,stepwise = F, parallel = T, seasonal = T)
auto.arima(ts(train[,"Arabic"],deltat = 1/7),ic="aicc",trace=T,stepwise = F, parallel = T, seasonal = T)
CVmodels
CVmodels <- as.data.frame(matrix(nrow = ncol(train)-1, ncol=8))
names(CVmodels) <- c("lang.topic","1day", "2day","3day","4day","5day","6day","7day")
CVmodels$lang.topic <- names(train[2:ncol(train)])
CVmodels[CVmodels$lang.topic == topic.i,i+1]
CVmodels[CVmodels$lang.topic == topic.i,i+1] <- sum(CVresults[!is.na(CVresults)]^2)/sum(!is.na(CVresults))
CVmodels
i
topic.i
for(topic.i in names(train)[2:ncol(train)]){
params <- coefs %>%
select(lang.topic, p,d,q) %>%
filter (lang.topic == topic.i)
for (i in 1:7){
CVresults <- tsCV(train[,topic.i], fit2, h=i, p = params$p, d = params$d, q= params$q)
CVmodels[CVmodels$lang.topic == topic.i,i+1] <- sum(CVresults[!is.na(CVresults)]^2)/sum(!is.na(CVresults))
}
}
CVmodels
apply(CVmodels[,2:7],2, round)
unique.users <- clean.topics %>%
group_by(lang.topic) %>%
filter(!is.na(lang.topic)) %>%
mutate(users = length(unique(user_id))) %>%
select(lang.topic, users) %>%
unique %>%
arrange(desc(users))
unique.users
?spread
count
tweetcount <- counts
counts
?gather
tweetcount <- counts %>% gather(date)
tweetcount <- counts %>% gather(date, Arabic)
tweetcount <- counts %>% gather(date, n)
tweetcount <- counts %>% gather(Arabic, n, -date)
tweetcount
tweetcount <- counts %>% gather(-date, n, -date)
tweetcount <- counts %>% gather(-date, n)
tweetcount <- counts %>% gather(!date, n, -date)
tweetcount <- counts %>% gather(one_of(coefs$lang.topic), n, -date)
tweetcount <- counts %>% gather(any_of(coefs$lang.topic), n, -date)
?one_of
tweetcount <- counts %>% gather(!matches("date"), n, -date)
tweetcount <- counts %>% gather(n, -date)
gather
?gather
tweetcount <- counts %>% gather(lang.topic,n, -date)
tweetcount
unique(tweetcount$lang.topic)
activityPerUser <- left_join(tweetcount,unique.users, by ="lang.topic") %>%
rename(tweets = n ) %>%
mutate(PerUser = tweets/users) %>%
select(date, lang.topic, PerUser)
activityPerUser <- activityPerUser %>%
spread(lang.topic,PerUser) %>%
arrange(date)
activityPerUser
train <- activityPerUser %>%
filter(date < "2017-01-28") %>%
select(date, one_of(
as.vector(coefs$lang.topic)))
test <- activityPerUser %>%
filter(date >= "2017-01-28") %>%
select(date, one_of(
as.vector(coefs$lang.topic)))
CVmodels <- as.data.frame(matrix(nrow = ncol(train)-1, ncol=8))
names(CVmodels) <- c("lang.topic","1day", "2day","3day","4day","5day","6day","7day")
CVmodels$lang.topic <- names(train[2:ncol(train)])
CVmodels <- as.data.frame(matrix(nrow = ncol(train)-1, ncol=8))
names(CVmodels) <- c("lang.topic","1day", "2day","3day","4day","5day","6day","7day")
CVmodels$lang.topic <- names(train[2:ncol(train)])
for(topic.i in names(train)[2:ncol(train)]){
params <- coefs %>%
select(lang.topic, p,d,q) %>%
filter (lang.topic == topic.i)
for (i in 1:7){
CVresults <- tsCV(train[,topic.i], fit2, h=i, p = params$p, d = params$d, q= params$q)
CVmodels[CVmodels$lang.topic == topic.i,i+1] <- sum(CVresults[!is.na(CVresults)]^2)/sum(!is.na(CVresults))
}
}
CVmodels %>% t()
tsplot(CVmodels %>% t %>% select(Topic 13 - Turkish))
test <- CVmodels %>% t()
test
test <- as.data.frame(CVmodels %>% t())
test
rm(test)
CVmodels
tsplot(CVmodels[1,])
ts.plot(CVmodels[1,])
plot.ts(CVmodels[1,])
plot(CVmodels[1,])
plot(t(CVmodels[1,]))
ts.plot(t(CVmodels[1,]))
t(CVmodels[1,])
ts.plot(t(CVmodels[1,2:8]))
ts.plot(t(CVmodels[2,2:8]))
ts.plot(t(CVmodels[3,2:8]))
ts.plot(t(CVmodels[4,2:8]))
ts.plot(t(CVmodels[5,2:8]))
ts.plot(t(CVmodels[6,2:8]))
ts.plot(t(CVmodels[7,2:8]))
ts.plot(t(CVmodels[8,2:8]))
ts.plot(t(CVmodels[9,2:8]))
ts.plot(t(CVmodels[10,2:8]))
ts.plot(t(CVmodels[11,2:8]))
CVmodels[,11]
CVmodels[11]
CVmodels[11,]
ts.plot(t(CVmodels[11,2:8]), main = CVmodels[11,1])
par=mfrow(c(2,1))
par(mfrow=c(4,5))
ts.plot(t(CVmodels[11,2:8]), main = CVmodels[11,1])
CVmodels
par(mfrow=c(4,5))
for (i in 1:19){
ts.plot(t(CVmodels[i,2:8]), main = CVmodels[i,1])
}
par(mfrow=c(4,5))
for (i in 1:19){
ts.plot(t(CVmodels[i,2:8]), main = CVmodels[i,1])
}
par(mfrow=c(4,5))
for (i in 1:19){
plot(t(CVmodels[i,2:8]), main = CVmodels[i,1])
}
plot(t(CVmodels[i,2:8]), main = CVmodels[i,1])
head(CVmodels)
head(CVmodels) %>% spread(lang.topic,perUser)
head(CVmodels) %>% gather(lang.topic,perUser)
head(CVmodels) %>% gather(window,perUser)
head(CVmodels) %>% gather(lang.topic,window,perUser)
head(CVmodels) %>% gather(lang.topic,perUser)
head(CVmodels) %>% gather(lang.topic,perUser, window)
head(CVmodels) %>% gather(window,perUser, window)
head(CVmodels) %>% gather(window,perUser)
head(CVmodels) %>% gather(lang.topic,perUser)
?gather
head(CVmodels) %>% gather(lang.topic,perUser,-lang.topic)
head(CVmodels) %>% gather(window,perUser,-lang.topic)
plotting <- CVmodels %>% gather(window,perUser,-lang.topic)
plotting
plotting <- CVmodels %>% gather(window,perUser,-lang.topic) %>% group_by(lang.topic)
plotting
library(ggplot2)
ggplot(plotting, aes(x=window, y=perUser, group = lang.topic))
ggplot(plotting, aes(x=window, y=perUser, group = lang.topic)) + geom_line
ggplot(plotting, aes(x=window, y=perUser, group = lang.topic)) + geom_line()
ggplot(plotting, aes(x=window, y=perUser, group = lang.topic)) + geom_line(aes(color=lang.topic))
ggplot(plotting, aes(x=window, y=perUser)) +
geom_line(aes(color=lang.topic))
geom_line(aes(group = lang.topic, color=lang.topic))
ggplot(plotting, aes(x=window, y=perUser)) +
geom_line(aes(group = lang.topic, color=lang.topic))
coefs
ggplot(plotting %>% filter(lang.topic %in% coefs$lang.topic[1:5]), aes(x=window, y=perUser)) +
geom_line(aes(group = lang.topic, color=lang.topic))
ggplot(plotting %>% filter(lang.topic %in% coefs$lang.topic[1:20]), aes(x=window, y=perUser)) +
geom_line(aes(group = lang.topic, color=lang.topic))
mean(activityPerUser$`Topic 1 - Turkish`)
apply(activityPerUser,2,mean)
warnings()
activityPerUser[is.na(activityPerUser)] <- 0
apply(activityPerUser,2,mean)
mean(activityPerUser$Spanish)
apply(activityPerUser,1,mean)
apply(activityPerUser,2,mean)
sapply(activityPerUser,mean)
round(sapply(activityPerUser,mean))
round(sapply(activityPerUser,mean),4)
round(sapply(test,mean),4)
round(sapply(train,mean),4)
