#                        stroke = FALSE, fillOpacity = .5,
#                        popup = paste0(subset$created_at,
#                                       "<br>",
#                                       subset$language),
#                        group = subset$language
#       )
})
}
# Launch the Server
shinyApp(ui, server)
createDygraph(the_xts)
input$lang <- list("Spanish", "Chinese")
temp <- list("Spanish", "Chinese")
subset <- subset(city$data) %>% filter(language %in% temp)#input$lang)
str(subset)
unique(subset$text_lang)
pal_sub <- pal[1:length(temp)]
pal_sub
factpal <- colorFactor(pal_sub, subset$language)
the_xts <- countLang(subset)
the_xts <- countLang(subset,zone)
server <- function(input, output, session) {
# get_Data <- reactive(
# )
output$map1 <- renderLeaflet({
#location_map(city)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = city$center$long , lat = city$center$lat , zoom = 8)
})
output$dygraph1 <- renderDygraph({
location_dygraph(city, pal)
})
observe({
# Create Subset of the data by the languages selected
subset <- subset(city$data) %>% filter(language %in% input$lang)
# Update the color pallette
pal_sub <- pal[1:length(input$lang)]
factpal <- colorFactor(pal_sub, subset$language)
the_xts <- countLang(subset,zone)
# Render the Dygraph
output$dygraph1 <- renderDygraph({
graph <- createDygraph(the_xts, pal=pal_sub)
})
#
#   # Update the Leaflet
#     leafletProxy("map1") %>%
#       clearMarkers() %>%
#       clearShapes() %>%
#       addCircleMarkers(lng=subset$long,
#                        lat=subset$lat,
#                        color = factpal(subset$language),
#                        radius = 5,
#                        stroke = FALSE, fillOpacity = .5,
#                        popup = paste0(subset$created_at,
#                                       "<br>",
#                                       subset$language),
#                        group = subset$language
#       )
})
}
shinyApp(ui, server)
leaflet(height = 500) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = city$center$long , lat = city$center$lat , zoom = 8)
server <- function(input, output, session) {
# get_Data <- reactive(
# )
output$map1 <- renderLeaflet({
#location_map(city)
leaflet(height = 500) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = city$center$long , lat = city$center$lat , zoom = 8)
})
output$dygraph1 <- renderDygraph({
location_dygraph(city, pal)
})
observe({
# Create Subset of the data by the languages selected
subset <- subset(city$data) %>% filter(language %in% input$lang)
# Update the color pallette
pal_sub <- pal[1:length(input$lang)]
factpal <- colorFactor(pal_sub, subset$language)
the_xts <- countLang(subset,zone)
# Render the Dygraph
output$dygraph1 <- renderDygraph({
graph <- createDygraph(the_xts, pal=pal_sub)
})
# Update the Leaflet
leafletProxy("map1") %>%
clearMarkers() %>%
clearShapes() %>%
addCircleMarkers(lng=subset$long,
lat=subset$lat,
color = factpal(subset$language),
radius = 5,
stroke = FALSE, fillOpacity = .5,
popup = paste0(subset$created_at,
"<br>",
subset$language),
group = subset$language
)
})
}
shinyApp(ui, server)
?renderLeaflet
server <- function(input, output, session) {
# get_Data <- reactive(
# )
output$map1 <- renderLeaflet({
#location_map(city)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = city$center$long , lat = city$center$lat , zoom = 9)
})
output$dygraph1 <- renderDygraph({
location_dygraph(city, pal)
})
observe({
# Create Subset of the data by the languages selected
subset <- subset(city$data) %>% filter(language %in% input$lang)
# Update the color pallette
pal_sub <- pal[1:length(input$lang)]
factpal <- colorFactor(pal_sub, subset$language)
the_xts <- countLang(subset,zone)
# Render the Dygraph
output$dygraph1 <- renderDygraph({
graph <- createDygraph(the_xts, pal=pal_sub)
})
# Update the Leaflet
leafletProxy("map1") %>%
clearMarkers() %>%
clearShapes() %>%
addCircleMarkers(lng=subset$long,
lat=subset$lat,
color = factpal(subset$language),
radius = 5,
stroke = FALSE, fillOpacity = .5,
popup = paste0(subset$created_at,
"<br>",
subset$language),
group = subset$language
)
})
shinyApp(ui, server)
server <- function(input, output, session) {
# get_Data <- reactive(
# )
output$map1 <- renderLeaflet({
#location_map(city)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = city$center$long , lat = city$center$lat , zoom = 9)
})
output$dygraph1 <- renderDygraph({
location_dygraph(city, pal)
})
observe({
# Create Subset of the data by the languages selected
subset <- subset(city$data) %>% filter(language %in% input$lang)
# Update the color pallette
pal_sub <- pal[1:length(input$lang)]
factpal <- colorFactor(pal_sub, subset$language)
the_xts <- countLang(subset,zone)
# Render the Dygraph
output$dygraph1 <- renderDygraph({
graph <- createDygraph(the_xts, pal=pal_sub)
})
# Update the Leaflet
leafletProxy("map1") %>%
clearMarkers() %>%
clearShapes() %>%
addCircleMarkers(lng=subset$long,
lat=subset$lat,
color = factpal(subset$language),
radius = 5,
stroke = FALSE, fillOpacity = .5,
popup = paste0(subset$created_at,
"<br>",
subset$language),
group = subset$language
)
})
}
shinyApp(ui, server)
pal <- brewer.pal(12, "Set1")
source('~/Box Sync/Capstone Files/Cultural_Mapper/Output/Code/Registry.R')
pal <- brewer.pal(9, "Set1")
#### UI ####
ui <- fluidPage(
fluidRow(
column(2,
h3("Languages in Los Angeles"),
# Select Languages here
selectizeInput("lang",
label = "Languages of Interest",
choices = as.character(unique(city$data$language)),
multiple = T,
options = list(maxItems = 9, placeholder = 'Select a language'),
selected = "Spanish")
),
column(10,
leafletOutput("map1", height = auto)
)
),
fluidRow(
dygraphOutput("dygraph1",height = 200)
)
)
#### Server ####
server <- function(input, output, session) {
# get_Data <- reactive(
# )
output$map1 <- renderLeaflet({
#location_map(city)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = city$center$long , lat = city$center$lat , zoom = 9)
})
output$dygraph1 <- renderDygraph({
location_dygraph(city, pal)
})
observe({
# Create Subset of the data by the languages selected
subset <- subset(city$data) %>% filter(language %in% input$lang)
# Update the color pallette
pal_sub <- pal[1:length(input$lang)]
factpal <- colorFactor(pal_sub, subset$language)
the_xts <- countLang(subset,zone)
# Render the Dygraph
output$dygraph1 <- renderDygraph({
graph <- createDygraph(the_xts, pal=pal_sub)
})
# Update the Leaflet
leafletProxy("map1") %>%
clearMarkers() %>%
clearShapes() %>%
addCircleMarkers(lng=subset$long,
lat=subset$lat,
color = factpal(subset$language),
radius = 5,
stroke = FALSE, fillOpacity = .5,
popup = paste0(subset$created_at,
"<br>",
subset$language),
group = subset$language
)
})
}
# Launch the Server
shinyApp(ui, server)
factpal(subset$language)
View(subset)
tail(subset)
head(subset[order(language),])
head(subset[order(subset$language),])
?order_by
?arrange
temp
temp <- list("Spanish", "Russian", "Chinese", "Ukranian")
subset <- subset(city$data) %>%
filter(language %in% temp) %>%
arrange(language)
head(subset)
tail(subset)
temp
unique(city$data$language)
unique(subset$language)
temp
temp <- list("Spanish", "Russian", "Chinese", "Ukrainian")
subset <- subset(city$data) %>%
filter(language %in% temp) %>%
arrange(language)
tail(subset)
ui <- fluidPage(
fluidRow(
column(2,
h3("Languages in Los Angeles"),
# Select Languages here
selectizeInput("lang",
label = "Languages of Interest",
choices = as.character(unique(city$data$language)),
multiple = T,
options = list(maxItems = 9, placeholder = 'Select a language'),
selected = "Spanish")
),
column(10,
leafletOutput("map1", height = auto)
)
),
fluidRow(
column(9,
dygraphOutput("dygraph1",height = 200)
),
column(3,
textOutput("dyLegend")
)
)
)
#### Server ####
server <- function(input, output, session) {
# get_Data <- reactive(
# )
output$map1 <- renderLeaflet({
#location_map(city)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = city$center$long , lat = city$center$lat , zoom = 9)
})
output$dygraph1 <- renderDygraph({
location_dygraph(city, pal) %>%
dyLegend(labelsDiv = "dyLegend")
})
observe({
# Create Subset of the data by the languages selected
subset <- subset(city$data) %>%
filter(language %in% temp) %>%
arrange(language)
# Update the color pallette
pal_sub <- pal[1:length(input$lang)]
factpal <- colorFactor(pal_sub, subset$language)
the_xts <- countLang(subset,zone)
# Render the Dygraph
output$dygraph1 <- renderDygraph({
graph <- createDygraph(the_xts, pal=pal_sub)
})
# Update the Leaflet
leafletProxy("map1") %>%
clearMarkers() %>%
clearShapes() %>%
addCircleMarkers(lng=subset$long,
lat=subset$lat,
color = factpal(subset$language),
radius = 5,
stroke = FALSE, fillOpacity = .5,
popup = paste0(subset$created_at,
"<br>",
subset$language),
group = subset$language
)
})
}
# Launch the Server
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(2,
h3("Languages in Los Angeles"),
# Select Languages here
selectizeInput("lang",
label = "Languages of Interest",
choices = as.character(unique(city$data$language)),
multiple = T,
options = list(maxItems = 9, placeholder = 'Select a language'),
selected = "Spanish")
),
column(10,
leafletOutput("map1", height = auto)
)
),
fluidRow(
column(9,
dygraphOutput("dygraph1",height = 200)
),
column(3,
textOutput("dyLegend")
)
)
)
ui <- fluidPage(
fluidRow(
column(2,
h3("Languages in Los Angeles"),
# Select Languages here
selectizeInput("lang",
label = "Languages of Interest",
choices = as.character(unique(city$data$language)),
multiple = T,
options = list(maxItems = 9, placeholder = 'Select a language'),
selected = "Spanish")
),
column(10,
leafletOutput("map1", height = "auto")
)
),
fluidRow(
column(9,
dygraphOutput("dygraph1",height = 200)
),
column(3,
textOutput("dyLegend")
)
)
)
server <- function(input, output, session) {
# get_Data <- reactive(
# )
output$map1 <- renderLeaflet({
#location_map(city)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = city$center$long , lat = city$center$lat , zoom = 9)
})
output$dygraph1 <- renderDygraph({
location_dygraph(city, pal) %>%
dyLegend(labelsDiv = "dyLegend")
})
observe({
# Create Subset of the data by the languages selected
subset <- subset(city$data) %>%
filter(language %in% input$lang) %>%
arrange(language)
# Update the color pallette
pal_sub <- pal[1:length(input$lang)]
factpal <- colorFactor(pal_sub, subset$language)
the_xts <- countLang(subset,zone)
# Render the Dygraph
output$dygraph1 <- renderDygraph({
graph <- createDygraph(the_xts, pal=pal_sub)
})
# Update the Leaflet
leafletProxy("map1") %>%
clearMarkers() %>%
clearShapes() %>%
addCircleMarkers(lng=subset$long,
lat=subset$lat,
color = factpal(subset$language),
radius = 5,
stroke = FALSE, fillOpacity = .5,
popup = paste0(subset$created_at,
"<br>",
subset$language),
group = subset$language
)
})
}
# Launch the Server
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(2,
h3("Languages in Los Angeles"),
# Select Languages here
selectizeInput("lang",
label = "Languages of Interest",
choices = as.character(unique(city$data$language)),
multiple = T,
options = list(maxItems = 9, placeholder = 'Select a language'),
selected = "Spanish")
),
column(10,
leafletOutput("map1")
)
),
fluidRow(
column(9,
dygraphOutput("dygraph1",height = 200)
),
column(3,
textOutput("dyLegend")
)
)
)
#### Server ####
server <- function(input, output, session) {
# get_Data <- reactive(
# )
output$map1 <- renderLeaflet({
#location_map(city)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = city$center$long , lat = city$center$lat , zoom = 9)
})
output$dygraph1 <- renderDygraph({
location_dygraph(city, pal) %>%
dyLegend(labelsDiv = "dyLegend")
})
observe({
# Create Subset of the data by the languages selected
subset <- subset(city$data) %>%
filter(language %in% input$lang) %>%
arrange(language)
# Update the color pallette
pal_sub <- pal[1:length(input$lang)]
factpal <- colorFactor(pal_sub, subset$language)
the_xts <- countLang(subset,zone)
# Render the Dygraph
output$dygraph1 <- renderDygraph({
createDygraph(the_xts, pal=pal_sub)%>%
dyLegend(labelsDiv = "dyLegend")
})
# Update the Leaflet
leafletProxy("map1") %>%
clearMarkers() %>%
clearShapes() %>%
addCircleMarkers(lng=subset$long,
lat=subset$lat,
color = factpal(subset$language),
radius = 5,
stroke = FALSE, fillOpacity = .5,
popup = paste0(subset$created_at,
"<br>",
subset$language),
group = subset$language
)
})
}
# Launch the Server
shinyApp(ui, server)
color = factpal(subset$language),
color = factpal(subset$language)
color
